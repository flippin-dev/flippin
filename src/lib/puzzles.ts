/**
 * @file Contains puzzle information for Flippin.
 * @author Brendan Sherman
 */

/** A start state and end state representing a puzzle. */
export type Puzzle = {
	start: string;
	end: string;
};

/** A title, start state, and end state representing a serialized puzzle. */
export type SerializedPuzzle = {
	title: string;
	start: string;
	end: string;
};

/** An example freeplay puzzle. */
export const freeplayExample: SerializedPuzzle = {
	title: 'Hello, Flippin!',
	start: '1011110111112101211101210',
	end: '0202002020000001000101110',
};

/** A blank puzzle to use for testing move combinations. */
export const testPuzzle: SerializedPuzzle = {
	title: 'Blank Slate',
	start: '0000000000000000000000000',
	end: '2222222222222222222222222',
};

/** The list of daily puzzles. */
export const puzzles: SerializedPuzzle[] = [
	{
		title: 'Autumn',
		start: '0122001220200100012221111',
		end: '2002220002000002212211111',
	},
	{
		title: 'Fall',
		start: '0001002111000012201022220',
		end: '2222221222200222200222222',
	},
	{
		title: 'Leaf Pile',
		start: '0201200100112121021200221',
		end: '2222122212201220200222000',
	},
	{
		title: 'Pumpkin',
		start: '0021211212210012202111011',
		end: '2221220102000000000010001',
	},
	{
		title: 'Scarecrow',
		start: '1100000120022121122101121',
		end: '2222222022201021202112121',
	},
	{
		title: 'Wagon',
		start: '2202212101212010212210201',
		end: '2222222221200022121222222',
	},
	{
		title: 'Acorn',
		start: '0010002212112200011220200',
		end: '1121112221100011000111011',
	},
	{
		title: 'Heart',
		start: '0011101120002000112200200',
		end: '0020000000000002000222022',
	},
	{
		title: 'Floppy',
		start: '0211201120210022002120120',
		end: '2111221112211122222220022',
	},
	{
		title: 'Power',
		start: '2202100020101220002010112',
		end: '1121121212212122111212221',
	},
	{
		title: 'Eraser',
		start: '0120020001211120101020102',
		end: '2221222111201110001220022',
	},
	{
		title: 'Document',
		start: '2222122122020000021111121',
		end: '2222121112211122111222222',
	},
	{
		title: 'Plus',
		start: '0000220101112200200012012',
		end: '0000000100011100010000000',
	},
	{
		title: 'Minus',
		start: '0201010110021022012001021',
		end: '2222222222200022222222222',
	},
	{
		title: 'Spiral',
		start: '2022202212002121012201100',
		end: '2222221112212122121222212',
	},
	{
		title: 'Striped',
		start: '1000000002212210100221100',
		end: '0000022222000002222200000',
	},
	{
		title: 'Checkered',
		start: '1010202122221211020221202',
		end: '1010101010101010101010101',
	},
	{
		title: 'Plaid',
		start: '2111011202101022210001021',
		end: '0101012121010101212101010',
	},
	{
		title: 'Rainbow',
		start: '2100202100110111002212121',
		end: '2102102102102102102102102',
	},
	{
		title: 'Jawbreaker',
		start: '2011120022121000222121001',
		end: '0000002220021200222000000',
	},
	{
		title: 'Woven',
		start: '2202112221222120201111110',
		end: '1010120202020202121201010',
	},
	{
		title: 'Lakeside',
		start: '2021122021202122020022220',
		end: '1000112121111112222222222',
	},
	{
		title: 'House',
		start: '2212222010211120010200202',
		end: '2212221012100010202002000',
	},
	{
		title: 'Circus',
		start: '2210201202011121110010220',
		end: '1020102020202020202002120',
	},
	{
		title: 'Fountain',
		start: '2010010021222120201112221',
		end: '1212121212112110121000000',
	},
	{
		title: 'Desert',
		start: '0210002102011020000200120',
		end: '2222020222000200000000000',
	},
	{
		title: 'Picnic',
		start: '1122011210101000002011122',
		end: '1112211222122221222200011',
	},
	{
		title: 'Disco',
		start: '2011201011001002202122001',
		end: '2111222122222222222201010',
	},
	{
		title: 'F',
		start: '1112101001100101122010200',
		end: '0000000222000000022200222',
	},
	{
		title: 'FL',
		start: '0022102110210101111111121',
		end: '1100011000110001100011111',
	},
	{
		title: 'FLI',
		start: '2200210200211100112000220',
		end: '2222212211122111221122222',
	},
	{
		title: 'FLIP',
		start: '2221112200111000202012110',
		end: '0000000220000000022200222',
	},
	{
		title: 'FLIPP',
		start: '2122222220210111010210011',
		end: '1111110011111111000010000',
	},
	{
		title: 'FLIPPI',
		start: '0210010220211020022000200',
		end: '2222211221112211122122222',
	},
	{
		title: 'FLIPPIN',
		start: '2200220200210121120222222',
		end: '0220000200020000220002200',
	},
	{
		title: 'Cat',
		start: '1211212100120200111012221',
		end: '2020200000020200010001010',
	},
	{
		title: 'Earth',
		start: '2222212221112220011022021',
		end: '1122221221221212212222212',
	},
	{
		title: 'Rose',
		start: '2111002101210112202020200',
		end: '2000220002221222211222122',
	},
	{
		title: 'Bird',
		start: '0120110111210212210211102',
		end: '2222222001200022202211111',
	},
	{
		title: 'Volcano',
		start: '2002022110221020222100002',
		end: '2020222022210122010201101',
	},
	{
		title: 'Duck',
		start: '1122212221000202000212020',
		end: '0000000012000100111022222',
	},
	{
		title: 'Tree',
		start: '0112210211010021012022121',
		end: '2112221112101112202211011',
	},
	{
		title: 'Baseball',
		start: '1212020222202222112111221',
		end: '0111010101101011010101110',
	},
	{
		title: 'Frisbee',
		start: '0222001010200011020202222',
		end: '2222220002000002222211111',
	},
	{
		title: 'Canoe',
		start: '2100002000201022122000220',
		end: '0000000000100012111222222',
	},
	{
		title: 'Controller',
		start: '2202111101022200122100220',
		end: '1101122222202022212221112',
	},
	{
		title: 'Paint Brush',
		start: '2002202200012122121202221',
		end: '1112211022110011011101111',
	},
	{
		title: 'Snorkel',
		start: '2120200201010010010012200',
		end: '0000102221020210010122111',
	},
	{
		title: 'Golf',
		start: '2201001100012201011200111',
		end: '2222220022202222022212111',
	},
	{
		title: 'Bicycle',
		start: '2210211020122221201011120',
		end: '2000222020022221200211001',
	},
	{
		title: 'Car',
		start: '1020121202002020022020112',
		end: '1111110221222222222210101',
	},
	{
		title: 'Bus',
		start: '2011022112010000012112222',
		end: '2222221000000000000012221',
	},
	{
		title: 'Train',
		start: '1101110212022221112200020',
		end: '0022101001011110111112222',
	},
	{
		title: 'Sailboat',
		start: '0000210210121201200202000',
		end: '2220220200002001111121112',
	},
	{
		title: 'Plane',
		start: '0220200212022221102212022',
		end: '2222020002220020020220222',
	},
	{
		title: 'Rocket',
		start: '2220020120101110022122121',
		end: '0020002120022201212110101',
	},
	{
		title: 'Cardboard',
		start: '1212111010100100012100102',
		end: '0120000200000000000000011',
	},
	{
		title: 'Crate',
		start: '0101020222200011212100002',
		end: '2000002110012100112000002',
	},
	{
		title: 'Present',
		start: '2012020112222202021121022',
		end: '2222222022210122000221012',
	},
	{
		title: 'Chest',
		start: '1222002121101002220120102',
		end: '2111211111000001101111111',
	},
	{
		title: 'Music Box',
		start: '1000012000101000121120222',
		end: '0000000000212022121021200',
	},
	{
		title: 'Bottle',
		start: '2121112200110200212201201',
		end: '2000221212122211222111111',
	},
	{
		title: 'Freighter',
		start: '2211221220101122102020001',
		end: '2222210022011221002111112',
	},
	{
		title: 'Snowflake',
		start: '2101112010221021020102120',
		end: '2121212221221221222121212',
	},
	{
		title: 'Toque',
		start: '0202200112002122022001012',
		end: '2202221112111111111100000',
	},
	{
		title: 'Evergreen',
		start: '0110020210112220222122010',
		end: '2212221112211122111222022',
	},
	{
		title: 'Hot Chocolate',
		start: '0022011212100220100101110',
		end: '2220222022222222000020002',
	},
	{
		title: 'Scarf',
		start: '2112112202102001001200100',
		end: '0000011111222220002100021',
	},
	{
		title: 'Ice Skate',
		start: '0221220121120201202112122',
		end: '0022200002000021212211112',
	},
	{
		title: 'Fireplace',
		start: '0202112021022210121211022',
		end: '0000021112210122000222222',
	},
	{
		title: 'Brain',
		start: '1000101110121211020011012',
		end: '1000100000000001100011101',
	},
	{
		title: 'Eye',
		start: '0122110102102011002212221',
		end: '0111012221120211222101110',
	},
	{
		title: 'Lungs',
		start: '1101102211101010001000111',
		end: '2212220102001000020002220',
	},
	{
		title: 'Heart',
		start: '2021001002112120211210202',
		end: '2020200021000012000120011',
	},
	{
		title: 'Stomach',
		start: '0020022210120110211112202',
		end: '1102111122112220222212221',
	},
	{
		title: 'Liver',
		start: '2102222211211211002010210',
		end: '2222200010000100002220222',
	},
	{
		title: 'Kidney',
		start: '2022020111122101122222000',
		end: '0110011100112201112001120',
	},
	{
		title: 'Strawberry',
		start: '0221022111120010111220100',
		end: '2121200000000002000222022',
	},
	{
		title: 'Apple',
		start: '0110122210111101100001002',
		end: '2221120002000000000020002',
	},
	{
		title: 'Blueberry',
		start: '2001210100210110112120221',
		end: '1111112121122211222112221',
	},
	{
		title: 'Watermelon',
		start: '0012121100002100111210222',
		end: '2220010010101021000221112',
	},
	{
		title: 'Cherries',
		start: '1000220022211121201110200',
		end: '1112211211121210010000100',
	},
	{
		title: 'Ale',
		start: '2102210121110100122021110',
		end: '2222221212210112101121112',
	},
	{
		title: 'Lime',
		start: '1202221212012021222211102',
		end: '2222221112111112111222222',
	},
	{
		title: 'TTT - Red 1',
		start: '1112221122221220212100211',
		end: '1111111111110111111111111',
	},
	{
		title: 'TTT - Blue 1',
		start: '1111121111100111001220202',
		end: '1111111111210111111111111',
	},
	{
		title: 'TTT - Red 2',
		start: '2012220001220102122022121',
		end: '1101111111210111111111111',
	},
	{
		title: 'TTT - Blue 2',
		start: '1110211210011100210202022',
		end: '1101111111210111111111211',
	},
	{
		title: 'TTT - Red 3',
		start: '1212112220021211022020122',
		end: '1101011111210111111111211',
	},
	{
		title: 'TTT - Blue 3',
		start: '1200200121002120011102001',
		end: '2101011111210111111111211',
	},
	{
		title: 'TTT - Red Wins!',
		start: '0122120221121122022112001',
		end: '2101011101210111011101211',
	},
	{
		title: 'Monkey',
		start: '1201022021102011202010020',
		end: '0000001110121210121002220',
	},
	{
		title: 'Elephant',
		start: '1122022200202022102111200',
		end: '1121112221122210121000220',
	},
	{
		title: 'Panda',
		start: '0222202002002020022202212',
		end: '2111211111121211121111111',
	},
	{
		title: 'Camel',
		start: '1122000220122121202202222',
		end: '0220000202000022022220222',
	},
	{
		title: 'Lion',
		start: '2000210120210121122221211',
		end: '2222212010021012001201001',
	},
	{
		title: 'Boa',
		start: '0201101212101010002102002',
		end: '2222221121011102122222222',
	},
	{
		title: 'Penguin',
		start: '2110122020222000121002201',
		end: '2200120012200122001200112',
	},
	{
		title: 'Strange Map',
		start: '0202202210012212002102222',
		end: '2101021101220102222102222',
	},
	{
		title: 'Set Sail',
		start: '1002121122202112010101211',
		end: '2222111122211110000120211',
	},
	{
		title: 'Kraken At Sea',
		start: '2011100022120011111111200',
		end: '1222222222010110110211202',
	},
	{
		title: 'On The Horizon',
		start: '2001211222111200022202222',
		end: '0000000000011102222222222',
	},
	{
		title: 'Row Ashore',
		start: '2000001100221022221022101',
		end: '2222222222212221002200221',
	},
	{
		title: 'X Marks The Spot',
		start: '2210202110112010110122001',
		end: '2120222202221112101011101',
	},
	{
		title: 'Buried Treasure',
		start: '2222212221011121120222200',
		end: '2222222220211000002200011',
	},
	{
		title: 'Observatory',
		start: '1112012222222212220022221',
		end: '1111112210122201112011000',
	},
	{
		title: 'Comet',
		start: '0110100022012221110210000',
		end: '2222122112211220012200222',
	},
	{
		title: 'Black Hole',
		start: '0020111100011210102101020',
		end: '0100000102020202010000010',
	},
	{
		title: 'Saturn',
		start: '1221200101220221012021222',
		end: '1110112220122010202110111',
	},
	{
		title: 'Satellite',
		start: '1000021211212010000111221',
		end: '2200002210001200102200002',
	},
	{
		title: 'Big Dipper',
		start: '2002012201010120102202020',
		end: '1122222122222122212122212',
	},
	{
		title: 'Sol',
		start: '0211210110201110212111020',
		end: '0202020102011102010202020',
	},
	{
		title: 'Chair',
		start: '1211100212212000210022112',
		end: '1111112111122211212111111',
	},
	{
		title: 'Table',
		start: '1101010121112020100100122',
		end: '0000000000111110101000000',
	},
	{
		title: 'Door',
		start: '1011022221021200111222022',
		end: '2000220002200122000222222',
	},
	{
		title: 'Bed',
		start: '0221202010101012211221001',
		end: '1111112221222221111110001',
	},
	{
		title: 'Sofa',
		start: '2222211111021222002222202',
		end: '2222211111211120000002220',
	},
	{
		title: 'Chandelier',
		start: '2201220012110111121021022',
		end: '0020001210101011010100000',
	},
	{
		title: 'Microwave',
		start: '1021202011202122201201121',
		end: '2222211120111201112022221',
	},
	{
		title: 'Tower Karst',
		start: '1120201022112211110211002',
		end: '1111101101001010020200222',
	},
	{
		title: 'Mountain',
		start: '1010001100021202211221111',
		end: '2222222122121121111111111',
	},
	{
		title: 'Plateau',
		start: '0012221201112110112200111',
		end: '1111100011000110001100000',
	},
	{
		title: 'Waterfall',
		start: '2000221202001022021220111',
		end: '1000112221122211122111221',
	},
	{
		title: 'Plain',
		start: '2222020211012120211112222',
		end: '2222222222222222222211111',
	},
	{
		title: 'Valley',
		start: '1211002001001011111111020',
		end: '0000020002200022111222122',
	},
	{
		title: 'Atoll',
		start: '2201111220020120002012120',
		end: '2111211221122221121222122',
	},
	{
		title: 'Snake',
		start: '2200002202020120011122010',
		end: '2222222222212022222222222',
	},
	{
		title: 'Snaake',
		start: '1001220222020200001200110',
		end: '0221222212222122222222222',
	},
	{
		title: 'Snaaake',
		start: '1201020012021001101020200',
		end: '1112212222122222220222222',
	},
	{
		title: 'Snaaaake',
		start: '0120110212210202221202222',
		end: '2222022222122211111122222',
	},
	{
		title: 'Snaaaaake',
		start: '1011211202122200022211100',
		end: '2211120221222212111122222',
	},
	{
		title: 'Snaaaaaake',
		start: '1002100011012012022220002',
		end: '2111111221122212221122022',
	},
	{
		title: 'Snaaaaaaake',
		start: '2222100211201120020200001',
		end: '2111111202122221222211111',
	},
	{
		title: 'Seahorse',
		start: '2100020011210000122120110',
		end: '2100210000100222101222012',
	},
	{
		title: 'Sea Turtle',
		start: '1101010020212012010021000',
		end: '1101012220022211222000100',
	},
	{
		title: 'Jellyfish',
		start: '2101012010020012020011201',
		end: '1002210102010101101010101',
	},
	{
		title: 'Crab',
		start: '1101221001121210001000010',
		end: '0020001210000002000202220',
	},
	{
		title: 'Shark',
		start: '2221201120011011012100221',
		end: '1222122210221002101022220',
	},
	{
		title: 'Manta Ray',
		start: '1011002221001021120122111',
		end: '1211112211122202222211111',
	},
	{
		title: 'Squid',
		start: '1101111102020220222002211',
		end: '1111120202200020000001010',
	},
];

/**
 * Performs the signless modulo operation on a number.
 *
 * @param {number} x The number to mod.
 * @param {number} n The modulus.
 *
 * @example
 * ```ts
 * // returns 2
 * mod(5, 3);
 * ```
 *
 * @throws {RangeError} The modulus must be greater than zero.
 *
 * @returns {number} The result of x mod n.
 */
export function mod(x: number, n: number): number {
	// Throw error if modulus is out of range
	if (n < 1) {
		throw new RangeError('The modulus should be greater than 0.');
	}

	return ((x % n) + n) % n;
}

/**
 * Subtracts two vectors.
 *
 * @param {number[]} v1 The first vector.
 * @param {number[]} v2 The second vector.
 *
 * @example
 * ```ts
 * // returns [2,1,0]
 * vvSubtract([3,3,3],[1,2,3]);
 * ```
 *
 * @throws {RangeError} The vector lengths must be the same.
 *
 * @returns {number[]} The resulting vector.
 */
function vVSubtract(v1: number[], v2: number[]): number[] {
	// Throw error if vector dimesions are different
	if (v1.length !== v2.length) {
		throw new RangeError('The vector lengths must be the same.');
	}

	return v1.map((x, i) => x - v2[i]);
}

/**
 * Left multiplies a matrix by a vector.
 *
 * @param {number[]}   v The vector.
 * @param {number[][]} m The matrix.
 *
 * @example
 * ```ts
 * // returns [3,3,3]
 * vMLeftMultiply([3,3,3],[[1,0,0],[0,1,0],[0,0,1]]);
 * ```
 *
 * @throws {RangeError} The vector and matrix row dimensions must be the same.
 *
 * @returns {number[]} The resulting vector.
 */
function vMLeftMultiply(v: number[], m: number[][]): number[] {
	// Throw error if vector and matrix row dimesions are different
	if (v.length !== m.length) {
		throw new RangeError(
			'The vector and matrix row dimensions must be the same.',
		);
	}

	const result: number[] = new Array(v.length).fill(0);

	for (let c = 0; c < v.length; c++) {
		for (let r = 0; r < v.length; r++) {
			result[c] += v[r] * m[r][c];
		}
	}

	return result;
}

/**
 * Check if two vectors are equivalent mod n.
 *
 * @param {number[]} v1 The first vector.
 * @param {number[]} v2 The second vector.
 * @param {number}   n  The modulus.
 *
 * @example
 * ```ts
 * // returns true
 * compareVectorsModN([1,1,1],[4,4,4],3);
 * ```
 *
 * @throws {RangeError} The vector lengths must be the same.
 * @throws {RangeError} The modulus must be greater than zero.
 *
 * @returns {boolean} True if the vectors are equivalent, false otherwise.
 */
function compareVectorsModN(v1: number[], v2: number[], n: number): boolean {
	// Throw error if vector dimesions are different
	if (v1.length !== v2.length) {
		throw new RangeError('The vector lengths must be the same.');
	}

	// Throw error if modulus is out of range
	if (n < 1) {
		throw new RangeError('The modulus should be greater than 0.');
	}

	return v1.every((x, i) => mod(x, n) === mod(v2[i], n));
}

/** The matrix representing the ruleset of Flippin. */
const mA = [
	[1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1],
];
/** A matrix satisfying D in D = SAT. */
const mD = [
	[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
];
/** A matrix satisfying S in D = SAT. */
const mS = [
	[1, 2, 1, 1, 2, 2, 1, 2, 0, 2, 1, 0, 0, 2, 1, 0, 1, 1, 0, 1, 2, 2, 1, 1, 0],
	[0, 1, 2, 2, 1, 0, 1, 2, 2, 1, 0, 2, 0, 2, 2, 0, 2, 1, 2, 0, 2, 1, 1, 0, 1],
	[0, 0, 1, 0, 0, 1, 0, 0, 2, 2, 0, 0, 1, 1, 0, 2, 2, 0, 0, 1, 2, 2, 2, 0, 0],
	[0, 0, 0, 1, 2, 2, 2, 0, 1, 2, 1, 0, 0, 2, 1, 2, 0, 1, 1, 1, 0, 1, 2, 0, 2],
	[0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 0, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 1, 2, 0],
	[0, 0, 0, 0, 0, 1, 1, 2, 1, 0, 2, 1, 0, 2, 0, 0, 0, 1, 1, 2, 2, 0, 1, 2, 2],
	[0, 0, 0, 0, 0, 0, 1, 2, 2, 1, 2, 1, 2, 1, 0, 1, 1, 1, 1, 1, 0, 1, 2, 2, 2],
	[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 2, 1, 0, 2, 2, 1, 0, 1, 2, 2, 1, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 2, 0, 1, 2, 1, 0, 0, 2, 0, 1, 1, 1],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 2, 0, 1, 1],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 1, 0, 1, 2, 2, 0, 2, 1, 2],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 1, 2, 2, 2, 0, 2, 1, 2, 1],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 2, 0, 0, 1, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 1, 2, 2, 0, 1, 1, 2, 1, 2],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 2, 1],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 2, 1, 2, 1, 1],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 2, 1, 1, 1],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 2, 2, 2],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 2, 2],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
];
/** A matrix satisfying T in D = SAT. */
const mT = [
	[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[1, 0, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[1, 2, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[1, 1, 0, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 2, 0, 2, 1, 1, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[1, 0, 0, 2, 1, 2, 2, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 2, 2, 1, 2, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[2, 1, 2, 2, 0, 0, 1, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 2, 0, 1, 0, 1, 1, 0, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[2, 2, 1, 2, 1, 2, 1, 1, 2, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[1, 2, 1, 2, 1, 0, 2, 1, 2, 0, 0, 1, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[2, 1, 0, 2, 1, 0, 0, 0, 0, 0, 1, 2, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 2, 0, 1, 2, 1, 1, 0, 0, 0, 1, 2, 2, 2, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0],
	[1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
	[1, 2, 2, 0, 2, 0, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
	[1, 0, 1, 1, 1, 2, 1, 1, 0, 1, 2, 2, 0, 0, 1, 0, 1, 0, 2, 1, 0, 0, 0, 0, 0],
	[1, 2, 1, 2, 0, 0, 2, 1, 0, 1, 0, 1, 2, 2, 2, 2, 1, 0, 0, 1, 0, 2, 0, 0, 0],
	[1, 1, 1, 0, 1, 1, 0, 1, 1, 2, 1, 0, 0, 2, 2, 1, 2, 0, 1, 0, 2, 0, 0, 0, 0],
	[1, 1, 2, 2, 1, 1, 2, 1, 1, 0, 2, 1, 0, 2, 1, 2, 1, 2, 2, 0, 1, 0, 1, 0, 0],
	[1, 0, 0, 0, 2, 2, 2, 0, 1, 1, 1, 2, 0, 1, 2, 1, 1, 0, 2, 2, 0, 2, 0, 1, 0],
	[0, 1, 0, 2, 0, 2, 2, 0, 1, 1, 2, 1, 0, 2, 1, 1, 1, 0, 2, 2, 2, 0, 0, 0, 1],
];

/**
 * Checks if a puzzle end state is reachable from a starting state.
 *
 * @param {string} start The start state.
 * @param {string} end   The end state.
 *
 * @example
 * ```ts
 * // returns true
 * isPuzzleSolvable('1011110111112101211101210','0202002020000001000101110');
 * ```
 *
 * @returns {boolean} True if solvable, false otherwise.
 */
export function isPuzzleSolvable(start: string, end: string): boolean {
	try {
		const startVector = start.split('').map((e) => +e);
		const endVector = end.split('').map((e) => +e);
		const b = vVSubtract(endVector, startVector);
		const x = vMLeftMultiply(vMLeftMultiply(vMLeftMultiply(b, mS), mD), mT);
		return compareVectorsModN(vMLeftMultiply(x, mA), b, 3);
	} catch (e) {
		console.error(e);
		return false;
	}
}
